/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.16
 * Generated at: 2017-09-12 07:58:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.reporter.news;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kr.co.jtimes.util.JsonDateConvertor;
import java.util.Date;
import com.google.gson.GsonBuilder;
import kr.co.jtimes.news.vo.TbNewsResult;
import com.google.gson.Gson;
import kr.co.jtimes.common.criteria.NewsCriteria;
import kr.co.jtimes.news.vo.TbNewsVo;
import java.util.List;
import kr.co.jtimes.news.dao.TbNewsDao;

public final class getNewsProcess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/reporter/commons/loginCheck.jsp", Long.valueOf(1504699923853L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("kr.co.jtimes.news.vo.TbNewsResult");
    _jspx_imports_classes.add("kr.co.jtimes.common.criteria.NewsCriteria");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("com.google.gson.Gson");
    _jspx_imports_classes.add("kr.co.jtimes.news.dao.TbNewsDao");
    _jspx_imports_classes.add("kr.co.jtimes.news.vo.TbNewsVo");
    _jspx_imports_classes.add("kr.co.jtimes.util.JsonDateConvertor");
    _jspx_imports_classes.add("com.google.gson.GsonBuilder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
 
	if(session.getAttribute("loginReporter") == null) {
		//로그인 완료 후 되돌아갈 url가져오기
		String url = (String) pageContext.getAttribute("url");
		String path = "/reporter/profile/login.jsp?deny=1&returnUrl="+url;
		response.sendRedirect(path);
		
		return;
	}

      out.write('\r');
      out.write('\n');

	final int rowsPerPage = 5, naviPerPage = 5;
	TbNewsDao newsDao = new TbNewsDao();
	
	int category_no = Integer.parseInt(request.getParameter("category"));
	int page_no = Integer.parseInt(request.getParameter("pno"));
	int totalRow = newsDao.getNewsCountAllByCategory(category_no);
	int totalPages = (int)Math.ceil((double)totalRow / rowsPerPage);
	
	if(page_no > totalPages) {
		page_no = 1;
	}
	
	int beginIndex = (page_no - 1) * rowsPerPage + 1; 
	int endIndex = page_no * rowsPerPage;
	
	int totalNaviBlocks = (int) Math.ceil(totalPages/(double)naviPerPage);
	int currentNaviBlock = (int) Math.ceil(page_no/(double)naviPerPage);
	int beginPage = (currentNaviBlock - 1) * naviPerPage + 1;
	int endPage = currentNaviBlock * naviPerPage;
	if(currentNaviBlock >= totalNaviBlocks) {
		endPage = totalPages;
	}
	
	NewsCriteria criteria = new NewsCriteria();
	criteria.setBeginIndex(beginIndex);
	criteria.setEndIndex(endIndex);
	criteria.setCategoryNo(category_no);
	
	List<TbNewsVo> newsList = newsDao.getNewsByCategory(criteria);
	TbNewsResult result = new TbNewsResult();
	
	result.setBeginPage(beginPage);
	result.setEndPage(endPage);
	result.setCurrentNaviBlock(currentNaviBlock);
	result.setTotalNaviBlocks(totalNaviBlocks);
	result.setNewsList(newsList);
	result.setNewsCategory(category_no);
	result.setTotalPages(totalPages);
	
	GsonBuilder builder = new GsonBuilder();
	builder.registerTypeAdapter(Date.class, new JsonDateConvertor());
	Gson data = builder.create();
	String jsonData = data.toJson(result);
	
	response.getWriter().println(jsonData);

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
